@model HeaderLinksModel
@using System.Text.Encodings.Web
@{
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] });
}

@await Component.InvokeAsync("Widget", new { widgetZone = "header_links_before" })
@if (Model.IsAuthenticated)
{
    @await Component.InvokeAsync("AdminHeaderLinks")
    <li class="nav-item">
        <a class="d-flex align-items-center nav-link btn btn-secondary" href="@Url.RouteUrl("CustomerInfo")">
            <span class="mdi mdi-account-circle"></span>
            <span class="text text-uppercase ml-3">@T("Account.MyAccount")</span>
        </a>
    </li>
    @if (Model.AllowPrivateMessages)
    {
        <li class="nav-item">
            <a class="d-flex align-items-center nav-link btn btn-secondary" href="@Url.RouteUrl("PrivateMessages", new { tab = "" })">
                <span class="mdi mdi-email"></span>
                <span class="text text-uppercase ml-3">@T("PrivateMessages.Inbox")</span>
                <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
            </a>
        </li>
    }
    <li class="nav-item">
        <a class="d-flex align-items-center nav-link btn btn-secondary" href="@Url.RouteUrl("Logout")">
            <span class="mdi mdi-lock"></span>
            <span class="text text-uppercase ml-3">@T("Account.Logout")</span>
        </a>
    </li>
}
else
{
    <li class="nav-item mb-4">
        <h5>@T("Account.Login.ReturningCustomer")</h5>
        <a class="d-flex align-items-center nav-link btn btn-secondary" href="@Url.RouteUrl("Login")">
            <span class="mdi mdi-lock-open"></span>
            <span class="text text-uppercase ml-3">@T("Account.Login")</span>
        </a>
    </li>
    <li class="nav-item">
        <h5>@T("Account.Login.NewCustomer")</h5>
        <div class="text generalMarginSupporter">
            @T("Account.Login.NewCustomerText")
        </div>
        <a class="d-flex align-items-center nav-link btn btn-secondary" href="@registerUrl">
            <span class="mdi mdi-account-plus-outline"></span>
            <span class="text text-uppercase ml-3">@T("Account.Register")</span>
        </a>
    </li>
}
@await Component.InvokeAsync("Widget", new { widgetZone = "header_links_after" })
@if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
{
    //new private message notification
    <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
    </script>
}

