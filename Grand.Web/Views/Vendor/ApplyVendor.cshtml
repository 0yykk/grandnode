@model ApplyVendorModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Vendors.Apply").Text);
}
<div class="page apply-vendor-page">
        <h2 class="text-center generalTitle">@T("PageTitle.Vendors.Apply")</h2>
        @await Component.InvokeAsync("TopicBlock", new { systemName = "ApplyVendor" })
        @await Component.InvokeAsync("Widget", new { widgetZone = "applyvendor_top" })
        @if (Model.DisableFormInput)
        {
            <div class="alert alert-success result text-xs-center">
                @Model.Result
            </div>
        }
        else
        {
            <form asp-route="ApplyVendorAccount" method="post">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                <div class="form-fields">
                    <div class="form-group">
                        <label asp-for="Name" class="col-form-label">@T("Vendors.ApplyAccount.Name"):</label>
                        <input asp-for="Name" class="form-control name" placeholder="@T("Vendors.ApplyAccount.Name.Hint")" />
                        <span asp-validation-for="Name"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Email" class="col-form-label">@T("Vendors.ApplyAccount.Email"):</label>
                        <input asp-for="Email" class="form-control name" placeholder="@T("Vendors.ApplyAccount.Email.Hint")" />
                        <span asp-validation-for="Email"></span>
                    </div>
                    @if (Model.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            <captcha />
                        </div>
                    }
                </div>
                <div class="col-12 buttons pt-1 pb-1">
                    <input type="submit" name="send-email" class="btn btn-success apply-vendor-button" value="@T("Vendors.ApplyAccount.Button")" />
                </div>
            </form>
        }
                @await Component.InvokeAsync("Widget", new { widgetZone = "applyvendor_bottom" })
</div>
