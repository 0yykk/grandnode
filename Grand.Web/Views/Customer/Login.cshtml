@model LoginModel
@using System.Net
@using Grand.Core
@inject IWebHelper webHelper

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.Query["returnUrl"]))
    {
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + WebUtility.UrlEncode(this.Context.Request.Query["returnUrl"]), null);
    }
}
<div class="page login-page">
    <h2 class="generalTitle">@T("Account.Login.Welcome")</h2>
    @Html.Partial("_ExternalAuthentication.AssociateMessage")
    @Html.Partial("_ExternalAuthentication.Errors")
    <div class="mb-2">
        <div class="row flex-md-row flex-grid mt-3 mb-3">
            @* login main block *@
            <div class="col-lg-6 col-12">
                <div class="card">
                    @using (Html.BeginForm())
                    {
                        var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                        <h5 class="card-header"><strong>@T("Account.Login.ReturningCustomer")</strong></h5>
                            <div class="card-block">
                                <div class="col-12">
                                    <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                                    <div class="form-group">
                                        @if (Model.UsernamesEnabled)
                                        {
                                            <div class="form-group row">
                                                <div class="col-lg-3 col-12">
                                                    @Html.LabelFor(m => m.Username, new { @class = "col-form-label" }, ":")
                                                </div>
                                                <div class="col-lg-9 col-12">
                                                    @Html.TextBoxFor(m => m.Username, new { @class = "form-control username", autofocus = "autofocus" })
                                                    @Html.ValidationMessageFor(m => m.Username)
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="form-group row">
                                                <div class="col-lg-3 col-12">
                                                    @Html.LabelFor(m => m.Email, new { @class = "col-form-label" })
                                                </div>
                                                <div class="col-lg-9 col-12">
                                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control email ", autofocus = "autofocus" })
                                                    @Html.ValidationMessageFor(m => m.Email)
                                                </div>
                                            </div>
                                        }
                                        <div class="form-group row">
                                            <div class="col-lg-3 col-12">
                                                @Html.LabelFor(m => m.Password, new { @class = "col-form-label" }, ":")
                                            </div>
                                            <div class="col-lg-9 col-12">
                                                @Html.PasswordFor(m => m.Password, new { @class = "form-control password" })
                                                @Html.ValidationMessageFor(m => m.Password)
                                            </div>
                                        </div>
                                        <div class="inputs d-flex flex-row">
                                            <label class="custom-control custom-checkbox">
                                                <input class="custom-control-input" data-val="true" data-val-required="'Remember Me' must not be empty." id="RememberMe" name="RememberMe" type="checkbox" value="true">
                                                <input class="custom-control-indicator" name="RememberMe" type="hidden" value="false">
                                                <span class="custom-control-indicator"></span>
                                                <span class="custom-control-description">@T("Account.Login.Fields.RememberMe")</span>
                                            </label>
                                            <span class="forgot-password">
                                                @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                                            </span>
                                        </div>
                                        @if (Model.DisplayCaptcha)
                                        {
                                            <div class="captcha-box">
                                                @Html.Raw(Html.GenerateCaptcha())
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer">

                                <div class="buttons">
                                    <input class="btn btn-success login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                                </div>
                            </div>
                    }
                </div>
            </div>
            @* want some register? *@
            @if (Model.CheckoutAsGuest)
            {
                <div class="col-lg-6 col-12 new-wrapper checkout-as-guest-or-register-block mt-2">
                        <h5 class="pt-1">
                            <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                        </h5>
                            <div class="col-12 text">
                                @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })
                            </div>
                            <div class="buttons mt-1 areYouGuest">
                                <input type="button" class="btn btn-secondary checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />
                                <input type="button" class="btn btn-secondary register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                </div>
            }
            else
            {
                <div class="col-lg-6 col-12">
                        <div class="card-block register-block">
                            <h5><strong>@T("Account.Login.NewCustomer")</strong></h5>
                            <div class="text generalMarginSupporter">
                                @T("Account.Login.NewCustomerText")
                            </div>
                            <div class="buttons">
                                <input type="button" class="btn btn-secondary register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                        </div>
                </div>
            }
        </div>
    </div>
    <div class="external-authentication">
        @await Component.InvokeAsync("ExternalMethods")
    </div>
    <div class="col-12 mb-2">
        @await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })
    </div>

</div>
