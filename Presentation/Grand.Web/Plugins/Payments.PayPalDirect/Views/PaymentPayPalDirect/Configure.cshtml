@{
    Layout = "";
}
@model ConfigurationModel
@using Grand.Plugin.Payments.PayPalDirect.Models;
@using Grand.Web.Framework;
@Html.Action("StoreScopeConfiguration", "Setting", new { area = "Admin" })
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="form-body">
            <div class="note note-info">
                <p>
                    <b>If you're using this gateway ensure that your primary store currency is supported by Paypal.</b><br />
                    <br />
                    To configure plugin follow these steps:<br />
                    1. Log into your Developer PayPal account (click <a href="https://www.paypal.com/us/webapps/mpp/referral/paypal-business-account2?partner_id=9JJPJNNPQ7PZ8" target="_blank">here</a> to create your account).<br />
                    2. Click on My Apps & Credentials from the Dashboard.<br />
                    3. Create new REST API app.<br />
                    4. Copy your Client ID and Secret key below.<br />
                    5. To be able to use recurring payments you need to set the webhook ID.
                    You can get it manually in your PayPal account (enter the URL https://www.yourStore.com/Plugins/PaymentPayPalDirect/Webhook below REST API application credentials),
                    or automatically by pressing "@T("Plugins.Payments.PayPalDirect.WebhookCreate")" button (not visible when running the site locally).<br />
                </p>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.ClientId_OverrideForStore, model => model.ClientId, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.ClientId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9">
                    @Html.GrandEditorFor(model => model.ClientId)
                    @Html.ValidationMessageFor(model => model.ClientId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.ClientSecret_OverrideForStore, model => model.ClientSecret, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.ClientSecret, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9">
                    @Html.GrandEditorFor(model => model.ClientSecret)
                    @Html.ValidationMessageFor(model => model.ClientSecret)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.WebhookId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9">
                    @if (Request.IsLocal)
                    {
                        @Html.GrandEditorFor(model => model.WebhookId)
                    }
                    else
                    {
                        <div class="input-group">
                            @Html.GrandEditorFor(model => model.WebhookId)
                            <div class="input-group-btn">
                                <button type="submit" name="createwebhook" class="btn btn-info">
                                    @T("Plugins.Payments.PayPalDirect.WebhookCreate")
                                </button>
                            </div>
                        </div>
                    }
                    @Html.ValidationMessageFor(model => model.WebhookId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.TransactModeId_OverrideForStore, model => model.TransactModeId, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.TransactModeValues, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.DropDownList("TransactModeId", Model.TransactModeValues, new { @class = "control-label" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.UseSandbox_OverrideForStore, model => model.UseSandbox, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.UseSandbox, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.UseSandbox)
                    @Html.ValidationMessageFor(model => model.UseSandbox)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.PassPurchasedItems_OverrideForStore, model => model.PassPurchasedItems, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.PassPurchasedItems, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.PassPurchasedItems)
                    @Html.ValidationMessageFor(model => model.PassPurchasedItems)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.AdditionalFee_OverrideForStore, model => model.AdditionalFee, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.AdditionalFee, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.AdditionalFee)
                    @Html.ValidationMessageFor(model => model.AdditionalFee)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.AdditionalFeePercentage_OverrideForStore, model => model.AdditionalFeePercentage, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.AdditionalFeePercentage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.AdditionalFeePercentage)
                    @Html.ValidationMessageFor(model => model.AdditionalFeePercentage)
                </div>
            </div>
        </div>
        <div class="form-actions">
            <div class="row">
                <div class="col-md-offset-3 col-sm-offset-3 col-md-9 col-sm-9">
                    <input type="submit" name="save" class="btn green" value="@T("Admin.Common.Save")" />
                </div>
            </div>
        </div>
    </div>

}