@model CustomerReminderModel
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)


<script type="text/javascript">
    $(document).ready(function () {
        $("#customerreminder-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });

        $("#@Html.FieldIdFor(model => model.AllowRenew)").change(toggleAllowRenew);

        toggleAllowRenew();

        function toggleAllowRenew() {
            if ($('#@Html.FieldIdFor(model => model.AllowRenew)').is(':checked')) {
                $('#pnlAllowRenew').show();
            } else {
                $('#pnlAllowRenew').hide();
            }
        }

    });
</script>


   
<div id="customerreminder-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.Conditions")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.Levels")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.History")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabConditions()
    </div>
    <div>
        @TabLevels()
    </div>
    <div>
        @TabHistory()
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customerreminder-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
<table class="adminContent">
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Name)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Active)
        </td>   
        <td class="adminData">
            @Html.EditorFor(model => model.Active)
            @Html.ValidationMessageFor(model => model.Active)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.StartDateTimeUtc)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.StartDateTimeUtc)
            @Html.ValidationMessageFor(model => model.StartDateTimeUtc)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.EndDateTimeUtc)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.EndDateTimeUtc)
            @Html.ValidationMessageFor(model => model.EndDateTimeUtc)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.LastUpdateDate)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.LastUpdateDate)
            @Html.ValidationMessageFor(model => model.LastUpdateDate)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.DisplayOrder)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.DisplayOrder)
            @Html.ValidationMessageFor(model => model.DisplayOrder)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.AllowRenew)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.AllowRenew)
            @Html.ValidationMessageFor(model => model.AllowRenew)
        </td>
    </tr>
    <tr id="pnlAllowRenew">
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.RenewedDay)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.RenewedDay)
            @Html.ValidationMessageFor(model => model.RenewedDay)
        </td>
    </tr>
    <tr>
        <td class="adminTitle" style="vertical-align: top;">
            @Html.NopLabelFor(model => model.ReminderRuleId)
        </td>
        <td class="adminData">
            @if (Model.ConditionCount > 0)
            {
                @Html.DropDownListFor(model => model.ReminderRuleId, ((Nop.Core.Domain.Customers.CustomerReminderRuleEnum)Model.ReminderRuleId).ToSelectList(), new { @disabled = "disabled" })
            }
            else
            {
                @Html.DropDownListFor(model => model.ReminderRuleId, ((Nop.Core.Domain.Customers.CustomerReminderRuleEnum)Model.ReminderRuleId).ToSelectList())
            }
            @Html.ValidationMessageFor(model => model.ReminderRuleId)
            <p>
                <em>
                    @T("admin.customers.customerreminder.text1")
                </em>
            </p>
            <p>
                <em>
                    @T("admin.customers.customerreminder.text2")
                </em>
            </p>
            <p>
                <em>
                    @T("admin.customers.customerreminder.text3")
                </em>
            </p>
            <p>
                <em>
                    @T("admin.customers.customerreminder.text4")
                </em>
            </p>
            <p>
                <em>
                    @T("admin.customers.customerreminder.text5")
                </em>
            </p>
        </td>
    </tr>

    <tr>
        <td class="adminTitle" style="vertical-align: top;">
            @Html.NopLabelFor(model => model.ConditionId)
        </td>
        <td class="adminData">
            @Html.DropDownListFor(model => model.ConditionId, ((Nop.Core.Domain.Customers.CustomerReminderConditionEnum)Model.ConditionId).ToSelectList())
            @Html.ValidationMessageFor(model => model.ConditionId)
            <p>
                <em>
                    @T("admin.customers.actiontype.helpText.OneOfThem")
                </em>
            </p>
            <p>
                <em>
                    @T("admin.customers.actiontype.helpText.AllOfThem")
                </em>
            </p>
        </td>
    </tr>
</table>
}

@helper TabConditions()
{
    <table class="adminContent">
        <tr>
            <td>
                @if (String.IsNullOrEmpty(Model.Id))
                {
                    @T("Admin.Customers.CustomerReminder.SaveBeforeEdit")
                }
            </td>
        </tr>
    @if (!String.IsNullOrEmpty(Model.Id))
    {
        <tr>
            <td>
                    @{ 
                        var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
                        var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
                    }
                    <div id="conditions-grid"></div>
                    
                    <script>
                        $(document).ready(function () {
                            $("#conditions-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("Conditions", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("ConditionDelete", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                        }
                                    },
                                    error: function (e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    numeric: false,
                                    previousNext: false,
                                    info: false
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                {
                                    field: "Name",
                                    title: "@T("Admin.Customers.CustomerReminder.Fields.Name")",
                                    width: 300,
                                    filterable: false,
                                    sortable: false
                                },
                                {
                                    field: "Condition",
                                    title: "@T("Admin.Customers.CustomerReminder.Fields.ConditionType")",
                                    width: 100,
                                },
                                {
                                    field: "Id",
                                    title: "@T("Admin.Common.Edit")",
                                    width: 100,
                                    template: '<a href="@Url.Content("~/Admin/CustomerReminder/EditCondition")?customerReminderId=@(Model.Id)&cid=#=Id#">@T("Admin.Common.Edit")</a>'
                                },
                                {
                                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                                    title: "@T("Admin.Common.Delete")",
                                    width: 100
                                }]
                            });
                        });
                </script>                                        
            </td>
        </tr>
        <tr>
            <td class="adminData">
                <input type="submit" id="btnAddNewCondition" name="btnAddNewCondition" value="@T("Admin.Customers.CustomerReminder.Conditions.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddCondition", "CustomerReminder", new { customerReminderId = Model.Id }))'); return false;" class="k-button" />
            </td>
        </tr>

        }
    </table>
}
@helper TabLevels()
{
    <table class="adminContent">
        <tr>
            <td>
                @if (String.IsNullOrEmpty(Model.Id))
                {
                    @T("Admin.Customers.CustomerReminder.SaveBeforeEdit")
                }
            </td>
        </tr>
        @if (!String.IsNullOrEmpty(Model.Id))
    {
            <tr>
                <td>
                    @{
                        var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
                        var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
                    }
                    <div id="levels-grid"></div>

                    <script>
                        $(document).ready(function () {
                            $("#levels-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("Levels", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("DeleteLevel", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                        }
                                    },
                                    error: function (e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    numeric: false,
                                    previousNext: false,
                                    info: false
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                {
                                    field: "Name",
                                    title: "@T("Admin.Customers.CustomerReminder.Fields.Name")",
                                    width: 300,
                                    filterable: false,
                                    sortable: false
                                },
                                {
                                    field: "Level",
                                    title: "@T("Admin.Customers.CustomerReminder.Fields.Level")",
                                    width: 100,
                                },
                                {
                                    field: "Id",
                                    title: "@T("Admin.Common.Edit")",
                                    width: 100,
                                    template: '<a href="@Url.Content("~/Admin/CustomerReminder/EditLevel")?customerReminderId=@(Model.Id)&cid=#=Id#">@T("Admin.Common.Edit")</a>'
                                },
                                {
                                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                                    title: "@T("Admin.Common.Delete")",
                                    width: 100
                                }]
                            });
                        });
                    </script>
                </td>
            </tr>
            <tr>
                <td class="adminData">
                    <input type="submit" id="btnAddNewLevel" name="btnAddNewLevel" value="@T("Admin.Customers.CustomerReminder.Levels.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddLevel", "CustomerReminder", new { customerReminderId = Model.Id }))'); return false;" class="k-button" />
                </td>
            </tr>

        }
    </table>
}

@helper TabHistory()
{
    <table class="adminContent">
        <tr>
            <td>
                @if (String.IsNullOrEmpty(Model.Id))
                {
                    @T("Admin.Customers.CustomerReminder.SaveBeforeEdit")
                }
            </td>
        </tr>
        @if (!String.IsNullOrEmpty(Model.Id))
    {
            <tr>
                <td>
                    @{
                        var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
                        var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
                    }
                    <div id="history-grid"></div>

                    <script>
                        $(document).ready(function () {
                            $("#history-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("History", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                    },
                              schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors"
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)]
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                {
                                    field: "SendDate",
                                    title: "@T("Admin.Customers.CustomerReminder.History.Fields.SendDate")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                },
                                {
                                    field: "Email",
                                    title: "@T("Admin.Customers.CustomerReminder.History.Fields.Customer")",
                                    width: 100,
                                },
                                {
                                    field: "Level",
                                    title: "@T("Admin.Customers.CustomerReminder.History.Fields.Level")",
                                    width: 50,
                                },
                                {
                                    field: "OrderId",
                                    title: "@T("Admin.Customers.CustomerReminder.History.Fields.Order")",
                                    width: 50,
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=OrderId#.gif" />'
                                }]
                            });
                        });
                    </script>
                </td>
            </tr>
           

            }
    </table>
}




