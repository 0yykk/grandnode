@model CampaignModel

@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)
@if (!String.IsNullOrEmpty(Model.Id))
{
    <div class="form-horizontal">
        <div class="form-body">
                <div class="note note-danger">
                    <strong>
                        @T("Admin.Promotions.Campaigns.Warning")
                    </strong>
                    <br />
                </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.TestEmail)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.TestEmail)
                    @Html.ValidationMessageFor(model => model.TestEmail)
                    &nbsp;&nbsp;
                    <input type="submit" name="send-test-email" class="btn default margin-top-10" value="@T("Admin.Promotions.Campaigns.SendTestEmail")" />
                </div>
            </div>            
        </div>
        <div class="form-actions">
            <div class="row">
                <div class="col-md-offset-3 col-sm-offset-3 col-md-9 col-sm-9">
                    <input type="submit" name="send-mass-email" class="btn default" value="@T("Admin.Promotions.Campaigns.SendMassEmail")" />
                </div>
            </div>
        </div>
    </div>
}
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Name)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Subject)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Subject)
                @Html.ValidationMessageFor(model => model.Subject)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Body):
            <div class="col-md-9 col-sm-9">
                @{
                    //we use rich editor with BODY tag supported
                    //it could be a better practice to implement one more editor (similar to RichEditor.cshtml)
                    //with "enableFullPage" property set to "true". but we do not want to duplicate source code
                    //that's why we use this workaround
                    //we store a value into "ViewData" and then use it in the RichEditor.cshtml file
                    ViewData["nop.RichEditor.EnableFullPage"] = true;
                }
                @Html.EditorFor(model => model.Body, "RichEditor")
                @Html.ValidationMessageFor(model => model.Body)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.StoreId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.StoreId, Model.AvailableStores)
                @Html.ValidationMessageFor(model => model.StoreId)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AllowedTokens)
            <div class="col-md-9 col-sm-9">
                @Html.DisplayFor(model => model.AllowedTokens)
            </div>
        </div>
    </div>
</div>
